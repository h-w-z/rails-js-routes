{"name":"Rails::JS::Routes","tagline":"A new approach to structure your javascript in non single-page Rails apps","body":"rails-js-routes\r\n========\r\n[![Build Status](https://travis-ci.org/tonekk/rails-js-routes.svg)](https://travis-ci.org/tonekk/rails-js-routes)\r\n[![Dependency Status](https://gemnasium.com/tonekk/rails-js-routes.svg)](https://gemnasium.com/tonekk/rails-js-routes)\r\n[![Gem Version](http://img.shields.io/gem/v/rails-js-routes.svg)](https://rubygems.org/gems/rails-js-routes)\r\n[![License](http://img.shields.io/:license-mit-blue.svg)](http://tonekk.mit-license.org)\r\n\r\n\r\n[Check out the blog post!](http://finn.heemeyer.net/2014/10/18/rails-js/)\r\n\r\n*NOTICE: We decided to rename this gem from ``rails-js`` to ``rails-js-routes`` as it was nearly impossible to find.*\r\n\r\n\r\nI worked on several Rails projects and there were many cases when it felt overkill to use a framework like ``Angular`` or ``Ember``, because javascript was only needed in some parts of the application.\r\nBut by not using these frameworks I had to think of a way to *structure* the code by myself.\r\nI came up with the conclusion to organize the javascript code like the ruby code is organized, that means: __Split up in controllers, which are split up in actions.__\r\n\r\n## How it works\r\n* In ``rails-js-routes`` we are able to define ``controllers``, as well as ``helpers``.\r\n* Controllers have ``actions`` which are executed when the matching rails action is executed.\r\n* Helpers should be clear. Pretty much like the rails helpers. There are helper per controller and global helpers.\r\n* The gem also provides a ``view helper`` to use in your layouts, which passes the routing information to ``rails-js-routes``.\r\n\r\n#### You start by creating an app.\r\n\r\n```js\r\n//= require routes\r\n\r\n/*\r\n * app/assets/javascripts/application.js\r\n */\r\n\r\nRails.app({\r\n // Define global helpers here\r\n helper: function() {\r\n }\r\n},\r\n// Put in initial data\r\n{\r\n  foo: 'bar'\r\n},\r\n// A function that is executed before every action\r\nfunction() {\r\n console.log('beforeAll() executed');\r\n});\r\n\r\n```\r\n#### Create controllers accordingly.\r\n\r\n```js\r\n\r\n/*\r\n * app/assets/javascripts/controllers/users.js\r\n */\r\n\r\nRails.controller('users', {\r\n  // actions here\r\n  new: function(h) {\r\n    // execute helper\r\n    h.awesomeHelper();\r\n  },\r\n\r\n  index: function(h) {\r\n    // Do the same as in new()\r\n    this.index(h);\r\n  }\r\n},\r\n{\r\n  // helpers here\r\n  awesomeHelper: function() {\r\n  }\r\n});\r\n\r\n```\r\n\r\n\r\n#### Use code from other controllers.\r\n```js\r\n\r\n/*\r\n * app/assets/javascripts/controllers/admin/users.js\r\n */\r\n\r\nRails.controller('admin/users', {\r\n  new: function(h) {\r\n    // Execute action of foreign controller\r\n    R.action('users#new');\r\n  },\r\n\r\n  index: function(h) {\r\n    // Execute foreign helper with arguments\r\n    R.helper('users', 'awesomeHelper', 1, 2, 3);\r\n\r\n    // Execute global helper with arguments\r\n    R.global('helper', 1, 2, 3);\r\n  }\r\n},{});\r\n\r\n```\r\n\r\n\r\n#### Global variables without the mess.\r\n```js\r\n/*\r\n * Use R singleton everywhere\r\n */\r\n\r\n// Setting\r\nR('answer', 42);\r\n// Multiple levels\r\nR('a.global.variable', 'foo');\r\n\r\n// Getting\r\nconsole.log(R('a.global.variable'));\r\n```\r\n\r\n\r\n#### Define hooks for namespaces.\r\n```js\r\n/*\r\n * app/assets/javascripts/namespaces/admin.js\r\n */\r\n\r\nRails.namespace('admin', function() {\r\n  // Will be executed on all admin routes (e.g. admin/users#new)\r\n  console.log('Hello Mr. Admin');\r\n});\r\n```\r\n\r\n#### For more info...\r\n...just read in ``app/assets/javascripts/routes.js``. I tried my best and documented nearly every line of code :)\r\n\r\nInstalling\r\n==========\r\n\r\nInstall it as any other gem by putting this to your ``Gemfile``:\r\n```ruby\r\ngem 'rails-js-routes'\r\n```\r\nIn your layouts, put this line into the ``head``:\r\n```erb\r\n<%= js_routes %>\r\n```\r\nAlso make sure to include ``routes`` in your ``application.js``. If you are using [Turbolinks](https://github.com/rails/turbolinks), make sure to include ``routes`` after ``turbolinks``.\r\n\r\nTesting\r\n=======\r\n\r\nJavascript tests are in ``test/dummy/spec/javascripts/rails-js-routes_spec.js``.\r\nThey are executed using ``rake teaspoon`` (by using the [teaspoon runner](https://github.com/modeset/teaspoon)).\r\nI'm still trying to get [travis to execute the teaspoon tests properly...](https://travis-ci.org/tonekk/rails-js-routes/builds/37740824)\r\n\r\nContributing\r\n============\r\n\r\n[Fork](https://github.com/tonekk/rails-js-routes/fork) -> Commit -> Pull Request\r\n\r\nThis project uses the [Airbnb Styleguide](https://github.com/airbnb/javascript) as our coding guideline.\r\nWe think this is a good piece of work and worth spreading.\r\nIn case of any doubts refer to the style used around.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}